import org.gradle.plugins.ide.idea.model.*

buildscript {
    repositories {
        jcenter()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.1-SNAPSHOT'
    }
}
apply plugin: 'net.minecraftforge.gradle.forge'
apply plugin: 'java'
apply plugin: 'idea'

idea {
  project {
    languageLevel = '1.8'
  }
}

ext.configFile = file "build.properties"
configFile.withReader {
    def prop = new Properties()
    prop.load(it)
    project.ext.config = new ConfigSlurper().parse prop
}

version = config.mod_version
group = config.group_name
archivesBaseName = "[${config.minecraft_version}]${config.mod_id}"
sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

minecraft {
    version = config.minecraft_version + "-" + config.forge_version
    runDir = "run"
    mappings = config.mcp_mappings
    replace '@MOD_VERSION@', version
}

processResources
{
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    from(sourceSets.main.resources.srcDirs) {
        include '**/*.info'
        include '**/*.properties'

        expand ([
            'version':project.version,
            'mcversion':project.minecraft.version,
            'forge_version': config.forge_version
           ])
    }

    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

jar {
        manifest {
        attributes 'FMLCorePlugin': 'com.foudroyantfactotum.mod.fousarchive.utility.asm.MOD_ASM',
                   'FMLCorePluginContainsFMLMod': 'false'
    }
}


//all below nicked from the mcGui project
if (config.structure_local_enabled == "true") {
    println("Using Structure from local path - You cannot produce a build with this configuration")
    def newModuleLocation = file(config.structure_local_path)
    def existingModule = idea.project.modules[0]
    def newIml = new IdeaModuleIml(existingModule.iml.xmlTransformer, newModuleLocation)
    def newModule = new IdeaModule(existingModule.project, newIml)
    newModule.name = "Structure"
    newModule.contentRoot = newModuleLocation
    newModule.sourceDirs = [ newModuleLocation ]

    idea {
        project {
            modules += newModule
        }
        module {
            iml {
                //Not a lot of documentation how to add a module dependency without using Multi-projects.
                withXml {
                    def node = it.asNode()
                    node.children()[0].appendNode('orderEntry', ["type": "module", "module-name": newModule.name])
                }
            }
        }
    }
} else {
    println("Using Structure from Maven")
    dependencies {
        repositories {
            maven {
                url 'http://repository.steamnsteel.info/artifactory/foudroyantfactotum-libs-stable'
            }
        }
        deobfCompile(group: 'com.foudroyantfactotum', name: 'Structure', version: '1.8.9-0.1', classifier: 'universal')
    }
}

buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'com.github.jengelman.gradle.plugins:shadow:1.2.3'
    }
}

apply plugin: 'com.github.johnrengelman.shadow'

shadowJar {
    dependencies {
        include(dependency('deobf.snapshot.21160126.com.foudroyantfactotum:Structure:1.8.9-0.1'))
    }
    relocate 'com.foudroyantfactotum.tool.structure',
             'com.foudroyantfactotum.mod.fousarchive.shaded.com.foudroyantfactotum.tool.structure'
    classifier = 'universal'
}

reobf.jar.task.dependsOn shadowJar
